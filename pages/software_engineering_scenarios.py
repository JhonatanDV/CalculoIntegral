import streamlit as st
import sympy as sp
import numpy as np
import random
from utils.calculator import evaluate_expression, solve_integral
from utils.plotting import plot_function, plot_integral, plot_area_between_curves
from components.math_input import create_math_input
from components.solution_display import display_solution, display_area_between_curves_solution
from utils.area_calculator import calculate_area_between_curves

# Lista de escenarios de ingenier√≠a de software
SOFTWARE_ENGINEERING_SCENARIOS = [
    {
        "title": "Consumo de Recursos del Servidor",
        "description": "Un servidor web tiene un consumo de recursos de memoria modelado por la funci√≥n M(t) = t¬≤ + 2t + 1 MB, donde t es el tiempo en minutos desde que inici√≥ el proceso. Calcula el total de recursos utilizados durante los primeros {n} minutos.",
        "function": "t^2 + 2*t + 1",
        "variable": "t",
        "default_lower": 0,
        "default_upper": 5,
        "type": "integral",
        "interpretation": "Este resultado representa la cantidad total de memoria (en MB) consumida por el servidor durante el per√≠odo de tiempo especificado. Esta informaci√≥n es crucial para planificar la capacidad y optimizar el rendimiento del servidor."
    },
    {
        "title": "Optimizaci√≥n de Base de Datos",
        "description": "La velocidad de consulta en una base de datos se modela mediante la funci√≥n V(n) = 3n¬≤ + 2n + 1 milisegundos, donde n representa el tama√±o del conjunto de datos. Calcula el tiempo acumulado para consultas con tama√±os desde {a} hasta {b}.",
        "function": "3*n^2 + 2*n + 1",
        "variable": "n",
        "default_lower": 1,
        "default_upper": 10,
        "type": "integral",
        "interpretation": "Este resultado representa el tiempo total acumulado (en milisegundos) para procesar consultas de diferentes tama√±os. Esto ayuda a identificar cuellos de botella y optimizar el rendimiento de la base de datos."
    },
    {
        "title": "Interacci√≥n de Usuarios",
        "description": "La tasa de usuarios que interact√∫an con una aplicaci√≥n web sigue la funci√≥n U(t) = 50e^(-0.2t) usuarios por minuto, donde t es el tiempo en minutos desde el lanzamiento. Calcula el n√∫mero total de usuarios que interactuaron durante las primeras {n} horas.",
        "function": "50*exp(-0.2*t)",
        "variable": "t",
        "default_lower": 0,
        "default_upper": 60,
        "type": "integral",
        "interpretation": "Este resultado representa el n√∫mero total de usuarios que interactuaron con la aplicaci√≥n durante el per√≠odo especificado. Esto es √∫til para analizar patrones de uso y planificar la capacidad del sistema."
    },
    {
        "title": "Diferencia entre Uso de CPU y Memoria",
        "description": "Un proceso de computaci√≥n utiliza CPU seg√∫n la funci√≥n C(t) = 2t + 5 unidades y memoria seg√∫n M(t) = t¬≤ + 2t + 1 unidades, donde t es el tiempo en minutos. Calcula la diferencia acumulada entre estos recursos durante un per√≠odo de {a} a {b} minutos.",
        "function1": "t^2 + 2*t + 1",
        "function2": "2*t + 5",
        "variable": "t",
        "default_lower": 0,
        "default_upper": 5,
        "type": "area_between_curves",
        "interpretation": "Este resultado representa la diferencia acumulada entre el uso de memoria y CPU durante el per√≠odo especificado. Un valor positivo indica que el proceso es m√°s intensivo en memoria, mientras que un valor negativo indica que es m√°s intensivo en CPU."
    },
    {
        "title": "Rendimiento de Algoritmos",
        "description": "Dos algoritmos de ordenamiento tienen tiempos de ejecuci√≥n modelados por A‚ÇÅ(n) = 0.1n¬≤ + n y A‚ÇÇ(n) = 5n¬∑log(n), donde n es el tama√±o de la entrada. Determina para qu√© tama√±os de entrada el primer algoritmo supera al segundo calculando el √°rea entre las curvas desde n = {a} hasta n = {b}.",
        "function1": "0.1*n^2 + n",
        "function2": "5*n*log(n)",
        "variable": "n",
        "default_lower": 1,
        "default_upper": 100,
        "type": "area_between_curves",
        "interpretation": "Este resultado ayuda a identificar los rangos de tama√±os de entrada donde un algoritmo supera al otro. Esta informaci√≥n es crucial para seleccionar el algoritmo √≥ptimo seg√∫n el tama√±o de los datos."
    },
    {
        "title": "Crecimiento de la Complejidad de Software",
        "description": "La complejidad de un sistema de software crece seg√∫n la funci√≥n C(t) = t¬≥ - 2t¬≤ + 3t, donde t es el tiempo en meses desde el inicio del proyecto. Calcula el incremento total de complejidad entre los meses {a} y {b}.",
        "function": "t^3 - 2*t^2 + 3*t",
        "variable": "t",
        "default_lower": 1,
        "default_upper": 12,
        "type": "integral",
        "interpretation": "Este resultado representa el aumento acumulado en la complejidad del software durante el per√≠odo especificado. Entender este crecimiento es esencial para la planificaci√≥n de refactorizaciones y mantenimiento del c√≥digo."
    },
    {
        "title": "Fiabilidad del Software",
        "description": "La tasa de fallos de un sistema sigue la funci√≥n F(t) = 10e^(-0.5t) fallos por d√≠a, donde t es el tiempo en d√≠as desde el despliegue. Calcula el n√∫mero esperado de fallos durante los primeros {n} d√≠as.",
        "function": "10*exp(-0.5*t)",
        "variable": "t",
        "default_lower": 0,
        "default_upper": 30,
        "type": "integral",
        "interpretation": "Este resultado representa el n√∫mero total esperado de fallos durante el per√≠odo especificado. Esta informaci√≥n es valiosa para la planificaci√≥n de pruebas y garant√≠a de calidad."
    },
    {
        "title": "Rendimiento en Procesamiento Paralelo",
        "description": "La eficiencia de un sistema de procesamiento paralelo var√≠a seg√∫n la funci√≥n E(n) = 1 - log(n)/n, donde n es el n√∫mero de n√∫cleos. Calcula la eficiencia acumulada cuando el sistema escala de {a} a {b} n√∫cleos.",
        "function": "1 - log(n)/n",
        "variable": "n",
        "default_lower": 1,
        "default_upper": 64,
        "type": "integral",
        "interpretation": "Este resultado representa la eficiencia acumulada a medida que el sistema escala en el n√∫mero de n√∫cleos. Esto ayuda a determinar el punto √≥ptimo de paralelizaci√≥n para maximizar el rendimiento."
    }
]

def generate_random_scenario():
    """Genera un escenario aleatorio de la lista de escenarios predefinidos."""
    scenario = random.choice(SOFTWARE_ENGINEERING_SCENARIOS)
    
    # Generar valores aleatorios para los par√°metros del problema
    if 'default_lower' in scenario and 'default_upper' in scenario:
        a = scenario['default_lower']
        b = scenario['default_upper']
        
        # A√±adir algo de variabilidad a los l√≠mites
        if scenario['type'] == 'integral':
            scenario_copy = scenario.copy()
            
            # Ajustar la descripci√≥n con los valores reales
            if '{a}' in scenario_copy['description'] and '{b}' in scenario_copy['description']:
                scenario_copy['description'] = scenario_copy['description'].format(a=a, b=b)
            elif '{n}' in scenario_copy['description']:
                scenario_copy['description'] = scenario_copy['description'].format(n=b)
                
            return scenario_copy
        elif scenario['type'] == 'area_between_curves':
            scenario_copy = scenario.copy()
            
            # Ajustar la descripci√≥n con los valores reales
            if '{a}' in scenario_copy['description'] and '{b}' in scenario_copy['description']:
                scenario_copy['description'] = scenario_copy['description'].format(a=a, b=b)
                
            return scenario_copy
    
    return scenario

def show():
    st.title("üîÑ Generador de Escenarios de Ingenier√≠a de Software")
    
    st.markdown("""
    Esta secci√≥n genera autom√°ticamente problemas de c√°lculo integral aplicados a situaciones reales 
    de ingenier√≠a de software. Estos problemas representan casos pr√°cticos donde el c√°lculo integral 
    es √∫til para modelar y resolver desaf√≠os comunes en el desarrollo y operaci√≥n de software.
    """)
    
    # Bot√≥n para generar un nuevo escenario
    if st.button("Generar Nuevo Escenario", key="generate_scenario"):
        st.session_state.current_scenario = generate_random_scenario()
    
    # Inicializar el escenario actual si no existe
    if 'current_scenario' not in st.session_state:
        st.session_state.current_scenario = generate_random_scenario()
    
    # Mostrar el escenario actual
    scenario = st.session_state.current_scenario
    
    st.header(scenario['title'])
    st.markdown(f"**Descripci√≥n del Problema:**\n\n{scenario['description']}")
    
    # Secci√≥n de soluci√≥n
    st.header("Resolver el Problema")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Variables de entrada seg√∫n el tipo de problema
        if scenario['type'] == 'integral':
            # Mostrar y permitir editar la funci√≥n
            function_input = create_math_input("Funci√≥n a integrar", scenario['function'], key="scenario_function")
            
            # L√≠mites de integraci√≥n
            col1a, col1b = st.columns(2)
            with col1a:
                lower_bound = st.text_input("L√≠mite inferior", str(scenario['default_lower']), key="scenario_lower")
            with col1b:
                upper_bound = st.text_input("L√≠mite superior", str(scenario['default_upper']), key="scenario_upper")
            
            variable = st.text_input("Variable", scenario['variable'], key="scenario_variable")
            
            # Bot√≥n para calcular
            if st.button("Calcular Integral", key="calculate_scenario_integral"):
                try:
                    # Asegurar que la variable sea un string
                    var_str = str(variable) if variable is not None else "x"
                    
                    # Calcular la integral
                    result, steps = solve_integral(function_input, lower_bound, upper_bound, var_str)
                    
                    # Mostrar la gr√°fica
                    plot_integral(function_input, lower_bound, upper_bound, var_str)
                    
                    # Mostrar la soluci√≥n
                    display_solution(function_input, lower_bound, upper_bound, result, steps)
                    
                    # Interpretaci√≥n del resultado
                    st.header("Interpretaci√≥n en Ingenier√≠a de Software")
                    st.markdown(scenario['interpretation'])
                    st.markdown(f"""
                    En este caso espec√≠fico, el valor calculado de **{result:.6f}** representa:
                    
                    - Para el problema "{scenario['title']}"
                    - En el intervalo [{lower_bound}, {upper_bound}] de {var_str}
                    """)
                    
                except Exception as e:
                    st.error(f"Error al calcular la integral: {str(e)}")
        
        elif scenario['type'] == 'area_between_curves':
            # Mostrar y permitir editar las funciones
            function1_input = create_math_input("Primera Funci√≥n", scenario['function1'], key="scenario_function1")
            function2_input = create_math_input("Segunda Funci√≥n", scenario['function2'], key="scenario_function2")
            
            # L√≠mites de integraci√≥n
            col1a, col1b = st.columns(2)
            with col1a:
                lower_bound = st.text_input("L√≠mite inferior", str(scenario['default_lower']), key="scenario_lower")
            with col1b:
                upper_bound = st.text_input("L√≠mite superior", str(scenario['default_upper']), key="scenario_upper")
            
            variable = st.text_input("Variable", scenario['variable'], key="scenario_variable")
            
            # Bot√≥n para calcular
            if st.button("Calcular √Årea Entre Curvas", key="calculate_scenario_area"):
                try:
                    # Asegurar que la variable sea un string
                    var_str = str(variable) if variable is not None else "x"
                    
                    # Calcular √°rea entre curvas
                    area, steps = calculate_area_between_curves(function1_input, function2_input, float(lower_bound), float(upper_bound), var_str)
                    
                    # Mostrar la gr√°fica
                    plot_area_between_curves(function1_input, function2_input, float(lower_bound), float(upper_bound), var_str)
                    
                    # Mostrar la soluci√≥n
                    display_area_between_curves_solution(function1_input, function2_input, float(lower_bound), float(upper_bound), area, steps)
                    
                    # Interpretaci√≥n del resultado
                    st.header("Interpretaci√≥n en Ingenier√≠a de Software")
                    st.markdown(scenario['interpretation'])
                    st.markdown(f"""
                    En este caso espec√≠fico, el valor calculado de **{area:.6f}** representa:
                    
                    - Para el problema "{scenario['title']}"
                    - En el intervalo [{lower_bound}, {upper_bound}] de {var_str}
                    """)
                    
                except Exception as e:
                    st.error(f"Error al calcular el √°rea entre curvas: {str(e)}")
    
    with col2:
        st.markdown("### Informaci√≥n del Modelo Matem√°tico")
        
        if scenario['type'] == 'integral':
            st.markdown(f"""
            **Tipo de problema:** Integral Definida
            
            **Funci√≥n a integrar:** 
            ```
            {scenario['function']}
            ```
            
            **Variable de integraci√≥n:** {scenario['variable']}
            
            **Rango t√≠pico:** [{scenario['default_lower']}, {scenario['default_upper']}]
            
            La integral representa la acumulaci√≥n o suma total de la cantidad 
            que est√° siendo modelada por la funci√≥n a lo largo del intervalo.
            """)
        
        elif scenario['type'] == 'area_between_curves':
            st.markdown(f"""
            **Tipo de problema:** √Årea Entre Curvas
            
            **Primera funci√≥n:** 
            ```
            {scenario['function1']}
            ```
            
            **Segunda funci√≥n:** 
            ```
            {scenario['function2']}
            ```
            
            **Variable:** {scenario['variable']}
            
            **Rango t√≠pico:** [{scenario['default_lower']}, {scenario['default_upper']}]
            
            El √°rea entre curvas representa la diferencia acumulada entre las dos 
            funciones a lo largo del intervalo especificado.
            """)
    
    # Secci√≥n de teor√≠a y aplicaci√≥n
    with st.expander("M√°s sobre aplicaciones del c√°lculo integral en ingenier√≠a de software"):
        st.markdown("""
        ### Aplicaciones del C√°lculo Integral en Ingenier√≠a de Software
        
        El c√°lculo integral tiene numerosas aplicaciones en ingenier√≠a de software:
        
        #### 1. An√°lisis de Rendimiento
        - **Consumo de recursos:** Permite calcular el uso total de memoria, CPU o ancho de banda a lo largo del tiempo.
        - **Optimizaci√≥n:** Ayuda a identificar cuellos de botella en el rendimiento del sistema.
        
        #### 2. An√°lisis de Fiabilidad
        - **Tasas de fallo:** Calcula el n√∫mero esperado de fallos durante per√≠odos espec√≠ficos.
        - **Tiempo medio entre fallos (MTBF):** Modelado mediante integrales para sistemas complejos.
        
        #### 3. Optimizaci√≥n de Algoritmos
        - **Comparaci√≥n de algoritmos:** Permite determinar qu√© algoritmo es m√°s eficiente para diferentes tama√±os de entrada.
        - **Complejidad amortizada:** Utiliza integrales para analizar el rendimiento a lo largo del tiempo.
        
        #### 4. Modelado de Usuarios y Carga
        - **Patrones de uso:** Calcula el n√∫mero total de usuarios o solicitudes durante per√≠odos espec√≠ficos.
        - **Planificaci√≥n de capacidad:** Ayuda a dimensionar infraestructura bas√°ndose en patrones de carga modelados matem√°ticamente.
        
        #### 5. Crecimiento y Evoluci√≥n del Software
        - **Acumulaci√≥n de deuda t√©cnica:** Modelada como la integral de la tasa de introducci√≥n de deuda t√©cnica.
        - **Evoluci√≥n de la complejidad:** Cuantifica c√≥mo crece la complejidad a lo largo del tiempo.
        """)